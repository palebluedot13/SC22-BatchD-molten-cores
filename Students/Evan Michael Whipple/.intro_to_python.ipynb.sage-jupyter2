{"backend_state":"running","connection_file":"/projects/803caf18-2f52-4012-a187-684798bd4465/.local/share/jupyter/runtime/kernel-4981f4e7-6709-428c-a6eb-0c965a6210e6.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"interpreter":{"hash":"08210294964727e4010dccc398c44f22b92a2e77e2aceea574ad21eae77cd8e8"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.10"},"orig_nbformat":4},"trust":true,"type":"settings"}
{"cell_type":"code","end":1659971773784,"exec_count":15,"id":"a0f53d","input":"balloon = 3.14\npin = 0.86\npin *= balloon\npin","kernel":"ds_env","output":{"0":{"data":{"text/plain":"2.7004"},"exec_count":15}},"pos":18,"start":1659971773779,"state":"done","type":"cell"}
{"cell_type":"code","end":1659971953763,"exec_count":24,"id":"c4b7a3","input":"live = False\nspan = True\nspan /= l\nspan","kernel":"ds_env","output":{"0":{"ename":"TypeError","evalue":"unsupported operand type(s) for /=: 'bool' and 'str'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","Input \u001b[0;32mIn [24]\u001b[0m, in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m live \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mFalse\u001b[39;00m\n\u001b[1;32m      2\u001b[0m span \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mTrue\u001b[39;00m\n\u001b[0;32m----> 3\u001b[0m span \u001b[38;5;241m/\u001b[39m\u001b[38;5;241m=\u001b[39m l\n\u001b[1;32m      4\u001b[0m span\n","\u001b[0;31mTypeError\u001b[0m: unsupported operand type(s) for /=: 'bool' and 'str'"]}},"pos":20,"start":1659971953726,"state":"done","type":"cell"}
{"cell_type":"code","end":1659972091175,"exec_count":25,"id":"077305","input":"f = \"map\"\nl = \" is blank\"\nink = f + l\nprint(ink)","kernel":"ds_env","output":{"0":{"name":"stdout","text":"map is blank\n"}},"pos":16,"start":1659972091169,"state":"done","type":"cell"}
{"cell_type":"code","end":1659973114818,"exec_count":60,"id":"c45bb9","input":"#create a list of your favorite colors\nfavorite_colors = [\"green\", \"red\", \"orange\", \"yellow\", \"teal\"]\nprint(favorite_colors[0], favorite_colors[1], favorite_colors[2], favorite_colors [3], favorite_colors[4])","kernel":"ds_env","output":{"0":{"name":"stdout","text":"green red orange yellow teal\n"}},"pos":31,"start":1659973114799,"state":"done","type":"cell"}
{"cell_type":"code","end":1659973150477,"exec_count":68,"id":"73117d","input":"# append another color to the list of your favorite colors\nfavorite_colors.pop(4)\nfavorite_colors.append(\"blue\")\nprint(favorite_colors[0], favorite_colors[1], favorite_colors[2], favorite_colors [3], favorite_colors[4])","kernel":"ds_env","output":{"0":{"name":"stdout","text":"green red orange yellow blue\n"}},"pos":33,"start":1659973150472,"state":"done","type":"cell"}
{"cell_type":"code","end":1659973409804,"exec_count":69,"id":"64a45a","input":"a = 1\nb = 2\nif a > b:\n    print(\"a is greater than b\")","kernel":"ds_env","pos":43,"start":1659973409775,"state":"done","type":"cell"}
{"cell_type":"code","end":1659973458231,"exec_count":72,"id":"1c38f0","input":"i = 0\nwhile i < 5:\n    print(\"Hello World\")\n    i = i + 1","kernel":"ds_env","output":{"0":{"name":"stdout","text":"Hello World\nHello World\nHello World\nHello World\nHello World\n"}},"pos":41,"start":1659973458213,"state":"done","type":"cell"}
{"cell_type":"code","end":1659978464092,"exec_count":133,"id":"7ec3d8","input":"i = 0\nfor i in range(10):\n    print(i)\n    if i < 3:\n        print(\"This is a small number.\")\n    i += 1","kernel":"ds_env","output":{"0":{"name":"stdout","text":"0\nThis is a small number.\n1\nThis is a small number.\n2\nThis is a small number.\n3\n4\n5\n6\n7\n8\n9\n"}},"pos":50,"start":1659978464075,"state":"done","type":"cell"}
{"cell_type":"code","end":1659978489449,"exec_count":134,"id":"0dba4d","input":"i = 2\nwhile i < 10:\n    if i%2 == 0:\n        print(i)\n    if 5 < i < 9:\n        print(i)\n    i += 1","kernel":"ds_env","output":{"0":{"name":"stdout","text":"2\n4\n6\n6\n7\n8\n8\n"}},"pos":52,"start":1659978489445,"state":"done","type":"cell"}
{"cell_type":"code","end":1659979674201,"exec_count":152,"id":"0bb5cc","input":"\ndef isPositive(a, b):\n    a = int(input(\"Choose a number\"))\n    b = int(input(\"Choose another number\"))\n    total = a * b\n    if total > 0:\n        return True\n    else:\n        return False\nout = isPositive(a, b)\nout","kernel":"ds_env","output":{"0":{"name":"input","opts":{"password":false,"prompt":"Choose a number"},"value":"4"},"1":{"name":"input","opts":{"password":false,"prompt":"Choose another number"},"value":"-10"},"2":{"data":{"text/plain":"False"},"exec_count":152}},"pos":68,"start":1659979671320,"state":"done","type":"cell"}
{"cell_type":"code","end":1659981730662,"exec_count":172,"id":"17e6af","input":"def print_list(list1):\n    for i in range(len(list1)):\n        print(list1[i])\n        print(\"\")\n\nl1 = ['Dog', 'Cat', 'Hamster']\nprint_list(l1)","kernel":"ds_env","output":{"0":{"name":"stdout","text":"Dog\n\nCat\n\nHamster\n\n"}},"pos":72,"start":1659981730649,"state":"done","type":"cell"}
{"cell_type":"code","end":1659981864279,"exec_count":176,"id":"e825cb","input":"import numpy as np #we rename numpy to np so we don't have to type 5 letters every time.","kernel":"ds_env","pos":75,"start":1659981864202,"state":"done","type":"cell"}
{"cell_type":"code","end":1659981865876,"exec_count":177,"id":"fea2b8","input":"my_array = np.zeros((2,3)) # (2,3) is the shape of the array\nmy_array","kernel":"ds_env","output":{"0":{"data":{"text/plain":"array([[0., 0., 0.],\n       [0., 0., 0.]])"},"exec_count":177}},"pos":77,"start":1659981865871,"state":"done","type":"cell"}
{"cell_type":"code","end":1659981876029,"exec_count":178,"id":"ee7d69","input":"np.random.rand(3,2) # we don't need to put the shape in braces this time","kernel":"ds_env","output":{"0":{"data":{"text/plain":"array([[0.23272769, 0.27769389],\n       [0.94477245, 0.4627275 ],\n       [0.71493369, 0.46075479]])"},"exec_count":178}},"pos":79,"start":1659981876012,"state":"done","type":"cell"}
{"cell_type":"code","end":1659981878079,"exec_count":179,"id":"c7ecab","input":"my_array2 = my_array + 1\nmy_array3 = my_array2 * 2\nprint(my_array2)\nprint(my_array3)","kernel":"ds_env","output":{"0":{"name":"stdout","text":"[[1. 1. 1.]\n [1. 1. 1.]]\n[[2. 2. 2.]\n [2. 2. 2.]]\n"}},"pos":81,"start":1659981878056,"state":"done","type":"cell"}
{"cell_type":"code","end":1659981886685,"exec_count":181,"id":"93d251","input":"my_array4 = my_array3 - 5\nprint(my_array4)","kernel":"ds_env","output":{"0":{"name":"stdout","text":"[[-3. -3. -3.]\n [-3. -3. -3.]]\n"}},"pos":84,"start":1659981886681,"state":"done","type":"cell"}
{"cell_type":"code","end":1659981959613,"exec_count":182,"id":"a7d69c","input":"import pandas as pd","kernel":"ds_env","pos":86,"start":1659981958974,"state":"done","type":"cell"}
{"cell_type":"code","end":1659982100454,"exec_count":183,"id":"5c1740","input":"data = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'C': [7, 8, 9]})\ndata","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>4</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>5</td>\n      <td>8</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>6</td>\n      <td>9</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   A  B  C\n0  1  4  7\n1  2  5  8\n2  3  6  9"},"exec_count":183}},"pos":88,"start":1659982100439,"state":"done","type":"cell"}
{"cell_type":"code","end":1659982151774,"exec_count":184,"id":"15d4e2","input":"data.head(2)","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>4</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>5</td>\n      <td>8</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   A  B  C\n0  1  4  7\n1  2  5  8"},"exec_count":184}},"pos":90,"start":1659982151757,"state":"done","type":"cell"}
{"cell_type":"code","end":1659982157200,"exec_count":185,"id":"0821e6","input":"data.tail(1)","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>6</td>\n      <td>9</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   A  B  C\n2  3  6  9"},"exec_count":185}},"pos":91,"start":1659982157186,"state":"done","type":"cell"}
{"cell_type":"code","end":1659982438684,"exec_count":186,"id":"9f1230","input":"# Gives you the names of all the columns, the number of rows in that column and a brief description of the values stored in those columns\ndata.describe()","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>3.0</td>\n      <td>3.0</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>2.0</td>\n      <td>5.0</td>\n      <td>8.0</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>1.0</td>\n      <td>1.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.0</td>\n      <td>4.0</td>\n      <td>7.0</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>1.5</td>\n      <td>4.5</td>\n      <td>7.5</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>2.0</td>\n      <td>5.0</td>\n      <td>8.0</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>2.5</td>\n      <td>5.5</td>\n      <td>8.5</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>3.0</td>\n      <td>6.0</td>\n      <td>9.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"         A    B    C\ncount  3.0  3.0  3.0\nmean   2.0  5.0  8.0\nstd    1.0  1.0  1.0\nmin    1.0  4.0  7.0\n25%    1.5  4.5  7.5\n50%    2.0  5.0  8.0\n75%    2.5  5.5  8.5\nmax    3.0  6.0  9.0"},"exec_count":186}},"pos":96,"start":1659982438647,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"19ddff","input":"","pos":70,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":0,"id":"4227a0","input":"","pos":101,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":128,"id":"059695","input":"x, y, z = input(\"Please input three items (EX: item 1 item 2 item 3) here: \").split()\nopinion_list = x, y, z\ni = 0\nwhile i < 3:\n    print(opinion_list[i])\n    i += 1","kernel":"ds_env","output":{"0":{"name":"input","opts":{"password":false,"prompt":"Please input three items (EX: item 1 item 2 item 3) here: "},"value":"rat rat rat"},"1":{"name":"stdout","text":"rat\nrat\nrat\n"}},"pos":54,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":16,"id":"8f6a81","input":"for number in my_list:\n  print(number)","output":{"0":{"name":"stdout","output_type":"stream","text":"1\n2\n3\n4\n5\n"}},"pos":36,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":17,"id":"557067","input":"for i in range(5): # range functions the same here as the list [0,1,2,3,4,5]\n    print('i = ', i)","output":{"0":{"name":"stdout","output_type":"stream","text":"i =  0\ni =  1\ni =  2\ni =  3\ni =  4\n"}},"pos":38,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":2,"id":"1c3706","input":"my_list = [1, 2, 3, 4, 5]","pos":24,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":2,"id":"4aa9d5","input":"a = 1\nb = 2\nc = 3\na # when you put a variable by itself, its value will be printed (This is a comment - anything after a # on the same line will be ignored)","output":{"0":{"data":{"text/plain":"1"},"execution_count":2,"metadata":{},"output_type":"execute_result"}},"pos":4,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":20,"id":"809af5","input":"a = 1\nb = 2\nif a > b:\n    print(\"a is greater than b\")\nelse:\n    print(\"b is less than a\")","output":{"0":{"name":"stdout","output_type":"stream","text":"b is less than a\n"}},"pos":45,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":21,"id":"dc47b8","input":"a = 1\nb = 1\nif a > b:\n    print(\"a is greater than b\")\nelif a == b:\n    print(\"a equals b\")\nelse:\n    print(\"b is less than a\")","output":{"0":{"name":"stdout","output_type":"stream","text":"a equals b\n"}},"pos":47,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":22,"id":"7c3325","input":"def my_first_function():\n    print('Hello world')","pos":57,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":23,"id":"3c4a33","input":"my_first_function()","output":{"0":{"name":"stdout","output_type":"stream","text":"Hello world\n"}},"pos":58,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":24,"id":"eb9598","input":"def add_numbers(a, b, c):\n    total = a + b + c\n    print(total)","pos":61,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":25,"id":"1d5079","input":"add_numbers(1, 2, 3)","output":{"0":{"name":"stdout","output_type":"stream","text":"6\n"}},"pos":62,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":26,"id":"e04897","input":"def add_numbers(a, b, c):\n    total = a + b + c\n    return total","pos":64,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":27,"id":"3b7a5e","input":"out = add_numbers(1, 2, 3)\nout","output":{"0":{"data":{"text/plain":"6"},"execution_count":27,"metadata":{},"output_type":"execute_result"}},"pos":65,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":3,"id":"18cfcf","input":"my_list[2] # here, 2 is the index you are accessing","output":{"0":{"data":{"text/plain":"3"},"execution_count":3,"metadata":{},"output_type":"execute_result"}},"pos":26,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":3,"id":"c48c28","input":"d = a + b\nd","output":{"0":{"data":{"text/plain":"3"},"execution_count":3,"metadata":{},"output_type":"execute_result"}},"pos":6,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":32,"id":"9aa4fd","input":"#make an array of all -3's\n","pos":83,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":37,"id":"d8b44d","input":"data['A']","output":{"0":{"data":{"text/plain":"0    1\n1    2\n2    3\nName: A, dtype: int64"},"execution_count":37,"metadata":{},"output_type":"execute_result"}},"pos":93,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":38,"id":"ea4fa8","input":"# Gives you the names of all of the columns\ndata.columns","output":{"0":{"data":{"text/plain":"Index(['A', 'B', 'C'], dtype='object')"},"execution_count":38,"metadata":{},"output_type":"execute_result"}},"pos":95,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":4,"id":"677ec9","input":"e = c - a\ne","output":{"0":{"data":{"text/plain":"2"},"execution_count":4,"metadata":{},"output_type":"execute_result"}},"pos":7,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":4,"id":"8c9d1a","input":"print(my_list[0], my_list[1], my_list[2], my_list[3], my_list[4])","output":{"0":{"name":"stdout","output_type":"stream","text":"1 2 3 4 5\n"}},"pos":28,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":40,"id":"1b677d","input":"# Tells you more about what is stored in those columns\ndata.info()","output":{"0":{"name":"stdout","output_type":"stream","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 3 entries, 0 to 2\nData columns (total 3 columns):\n #   Column  Non-Null Count  Dtype\n---  ------  --------------  -----\n 0   A       3 non-null      int64\n 1   B       3 non-null      int64\n 2   C       3 non-null      int64\ndtypes: int64(3)\nmemory usage: 200.0 bytes\n"}},"pos":97,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":41,"id":"980d8b","input":"# Going through a row 1 value at a time\nfor i in data['A']:\n    print(i)","output":{"0":{"name":"stdout","output_type":"stream","text":"1\n2\n3\n"}},"pos":99,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":42,"id":"d8c642","input":"# going through the entire dataframe 1 value at a time\nprint(50*\"-\")\nfor col_name in data.columns:\n    for value in data[col_name]:\n        print(value)\nprint(50*\"-\")","output":{"0":{"name":"stdout","output_type":"stream","text":"--------------------------------------------------\n1\n2\n3\n4\n5\n6\n7\n8\n9\n--------------------------------------------------\n"}},"pos":100,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":5,"id":"b5cc0d","input":"f = b * c\nf","output":{"0":{"data":{"text/plain":"6"},"execution_count":5,"metadata":{},"output_type":"execute_result"}},"pos":8,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":6,"id":"ffb405","input":"g = a / b\ng","output":{"0":{"data":{"text/plain":"0.5"},"execution_count":6,"metadata":{},"output_type":"execute_result"}},"pos":9,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":7,"id":"3dfc56","input":"g = g*2 # the same thing works for /, +, and -\ng","output":{"0":{"data":{"text/plain":"1.0"},"execution_count":7,"metadata":{},"output_type":"execute_result"}},"pos":11,"state":"done","type":"cell"}
{"cell_type":"code","exec_count":8,"id":"73b3df","input":"f/=2 # there is also +=, -=, and *=\nf","output":{"0":{"data":{"text/plain":"3.0"},"execution_count":8,"metadata":{},"output_type":"execute_result"}},"pos":13,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"0e0e81","input":"Whenever the computer sees the function being used, it automatically runs the code stored inside of that function.","pos":59,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"0ff654","input":"There are tons of different types of variables we can make. For this next section, we will ask the students to go out and figure out how to create the following types of variable: strings, floats and booleans. Once you have created these variables, try the same operations we used above and see what they do.","pos":14,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"1ce1eb","input":"### Lists\n\n","pos":21,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"22434c","input":"Our dataframe is pretty small so it's easy to show the whole thing in the output, but for larger dataframes it is important to only show a few of the rows so we don't have to scroll all over. To do this, we can use the df.head\\(x\\) function to show the first x rows of the dataframe or tail\\(x\\) to show the last x number of rows\n","pos":89,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"2808f2","input":"Now for if statements. The if-elif-else statement is used to conditionally execute a statement or a block of statements. Conditions can be true or false, execute one thing when the condition is true, something else when the condition is false.","pos":42,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"2bb935","input":"In the next block, create a while loop that prints out all of the even numbers between 1 and 10. Additionally, if the number is between 5 and 9, print the number out a second time.\n\n","pos":51,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"2c1c93","input":"First up, lists. you can create a list with the following code.\n\n","pos":23,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"361101","input":"The goal of this notebook is to provide students with knowledge of the fundamentals of python. We will take a more interactive approach than most class room settings and ask the students to do some research on their own then bring their learnings back here to share with the class. ","pos":1,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"36cfdd","input":"**TODO:** Make an array from my\\_array of all \\-3's:\n\n","pos":82,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"41a743","input":"### Functions","pos":55,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"43b3d5","input":"Now its your turn. Either break up into 3 teams and have each team solve one of the blocks or solve them all together.","pos":48,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"43b7cd","input":"# Modules \\(Pandas and numpy\\)\n\n### Why are there Pandas in Python? What is numpy?\n\nIn the following section we will be covering modules. Above, we leaned about functions and the power that they have. Modules let us use functions that other people have created to solve problems that we commonly encounter \\-\\- you can think of this as standing on the shoulders of giants by being just lazy enough to want to write code over and over again. \n\nFor example, if we find that we frequently have to get a random number, instead of coding that entire process every time, you could just import a function that either you or someone else created in the past. Basically, modules and importing lets us have access to the work of many other coders, making it a very powerful tool.\n\n","pos":73,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"48d2f2","input":"Just like regular variables, we can do operations on this list","pos":80,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"5d2ac2","input":"Sometimes we want to update the value of one variable, so we can do this","pos":10,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"689745","input":"### Numpy \\- For Scientific Computing in Python\n\nBelow, we will import the numpy module and use a few of its functions to show off this power. Numpy is a library which is coded outside of python, making it faster. It gives us access to better and more efficient lists\n\nFor any module you encounter, you should be prepared to <u>read the docs.</u> The \"docs\" are how we can learn to use each module, and you can find Numpy's here: [https://numpy.org/. ](https://numpy.org/)\n\n**For using modules, you'll want to import them like so below.**\n\n","pos":74,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"68c43a","input":"Create a few float variables here, then try to add them together, subtract them, multiply them and divide them to see what happens. You may get an error, and thats okay. Its important to know what can and can't be done with a type of data.","pos":17,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"74784c","input":"In the block below, create a function that takes in 2 numbers and returns True if the product of the numbers is positive and False in all other cases.","pos":67,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"76587f","input":"We can also perform basic algebra to these variables and save the output to a new variable","pos":5,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"80cade","input":"### Pandas \\- A Data Scientist's Best Friend\n\nWith numpy briefly explored above, we will now check out a little bit about pandas. Pandas is an awesome module that helps us deal with large amounts of data in an easy to understand way. Below we will look at some of its many functions\n\nFirst, we'll have to import it. It is common practice to \\`import pandas as pd\\` but you are free to import it as you see fit.\n","pos":85,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"817b0e","input":"Additionally, we can use elif statements to add additional conditions to the structure.","pos":46,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"819c45","input":"Variables work by assigning a value to a specific word or string of characters. It can be done using the \"=\" sign. This assigns whatever is on the right the string of characters on the left. We'll go ahead and try assigning a few variables in the next block.","pos":3,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"830c5c","input":"To access a specific item from the list, you would do the following.","pos":25,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"858991","input":"In the block below, create a function that takes in a string and returns the string in reverse order. For example, if the input was \"Hello\" the output should be \"olleH\"","pos":69,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"85b65c","input":"### For loops, while loops, and if statements \n\n","pos":34,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"997a14","input":"In the next block, create a for loop that counts from 0 to 10 and prints out each number. Additionally, if the number is less than 3, print out \"This is a small number\".","pos":49,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"9bd474","input":"You can also get various details about the dataframe with the following functions.\n","pos":94,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"9cb05f","input":"We can add else statements to the above. An else statement is what will be run if the original statement is false.","pos":44,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"a0e2a6","input":"# Python Basics\n\n","pos":0,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"a60ec1","input":"Below, create a list of your favorite colors. \n","pos":30,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"a75787","input":"In the next block, ask the user to input 3 items and add them all to a list. Then. create a loop that prints out each item that the user entered.\n\n","pos":53,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"af99c5","input":"In the block below, we will make a while loop that runs 5 times. For while loops, we can't specify how long they will run for ahead of time so its important for us to create an achievable exit condition. An exit condition is just the condition that will cause the code to stop running. This is checked every time, immediatly before the code runs or reruns. We want to make sure that this condition will eventually happen, otherwise the code will run until something crashes or we manually close it","pos":40,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"b20dd8","input":"We will learn more about for loops in the next lesson. For now, we will use them to go through a list and print out each element.","pos":35,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"b61797","input":"Create a few string variables here, then try to add them together, subtract them, multiply them and divide them to see what happens. You may get an error, and thats okay. Its important to know what can and can't be done with a type of data.","pos":15,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"b7896a","input":"Now figure out how to `append()` an item to your list. Maybe google: \"how to append an item to a list python\"\n","pos":32,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"c16eb3","input":"Next, we will look at how to make a list run a specific number of times.","pos":37,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"c323bb","input":"**Next we will check out iterating through a dataframe.**\n","pos":98,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"cb5a34","input":"Functions act like variables but instead of storing a value, they store lines of code. Below we can see how a function is created and used.","pos":56,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"cd72e7","input":"The first element in the list is at index 0, then the second element is at index 1 and so on.\n\n","pos":27,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"cf0ab0","input":"### Variables","pos":2,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"cf7136","input":"Pandas works with objects called **DataFrames**. Not sure what that is? Read the docs: [https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html.](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.html)\n\nOr you can simply look below.\n","pos":87,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"d457ae","input":"Next, we'll take a look at while loops. In general, you can make a while loop do anything that a for loop can do but with slightly different syntax, so if you find youself understanding while loops better than for loops, you can just focus on using while loops. ","pos":39,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"d62ace","input":"With Numpy, we can make a list of zeros like this:\n","pos":76,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"d95ccd","input":"Additionally, functions can take in one or multiple values to use in their code, as we can see below.","pos":60,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"dd40c7","input":"Create a few boolean variables here, then try to add them together, subtract them, multiply them and divide them to see what happens. You may get an error, and thats okay. Its important to know what can and can't be done with a type of data.\n\n","pos":19,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"de1c02","input":"Lists work similarly to the variables we created above but store multiple values. We'll cover the three types metioned above then ask the students to try and create their own versions of them.\n\n","pos":22,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"e33b79","input":"In the block below, create a function that takes in a list and prints out each element 1 at a time. For example, if the input was ['Dog', 'Cat', 'Hamster'], the output should be\n\nDog\n\nCat\n\nHamster\n\n","pos":71,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"e4a73e","input":"**TODO:** Now its your turn. We will have students create their own version of this data type.\n","pos":29,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"e81fab","input":"Now its your turn! You can either work on each of the following challenges in teams of 2 or walk through each one as a group. In any case, it is recommended to look at them at a high level together so that everyone understands the concepts in each section.","pos":66,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"ea2a16","input":"Finnally, functions can have a \"return\" statement. This is what the function sends back to the place it was called. You can think of functions like black boxes where the parameters in the parentheses are the input and the return statement is the output. This output can be saved to a variable to be used later. We will redefine the add_numbers function from above using a return statement to show this off.","pos":63,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"ec4aa2","input":"Or a list of random decimal numbers like this:","pos":78,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"f726db","input":"This can get quite annoying with longer variable names, so we can do the following","pos":12,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"fc9ec4","input":"Alternatively you can look at just 1 row at a time by calling it similarly to a dictionary\n","pos":92,"state":"done","type":"cell"}
{"end":1659980410401,"exec_count":157,"id":"4d40eb","input":"def backwards(x):\n    return x[::-1]\nreverse = backwards(input(\"Type something here: \"))\nprint(reverse)","kernel":"ds_env","output":{"0":{"name":"input","opts":{"password":false,"prompt":"Type something here: "},"value":"I mashed my face into my keyboard"},"1":{"name":"stdout","text":"draobyek ym otni ecaf ym dehsam I\n"}},"pos":69.5,"start":1659980396272,"state":"done","type":"cell"}
{"id":0,"time":1659971978776,"type":"user"}
{"last_load":1659970860714,"type":"file"}